"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(e,n,t,o,i){"function"==typeof define&&define.amd?define(function(){return e.fullpage=o(n,t),e.fullpage}):"object"===("undefined"==typeof exports?"undefined":_typeof(exports))?module.exports=o(n,t):n.fullpage=o(n,t)}(void 0,window,document,function(e,n,t){function o(e){h(qe,Je),Ye(),je.css3&&(je.css3=Me()),null!==qe?(c(qe,{height:"100%",position:"relative"}),g(qe,Ke),g(f("html"),Qe)):Xe("error","Error! Fullpage.js needs to be initialized with a selector. For example: fullpage('#fullpage');"),R(!0),Pe(),Ne(),Be();var n=u(je.sectionSelector);for(i=0;i<n.length;++i)g(n[i],on);var t=u(je.slideSelector);for(i=0;i<t.length;++i)g(t[i],vn);je.navigation&&_();for(var o=u(rn),i=0;i<o.length;i++){var r=i,a=o[i],l=u(dn,a),v=l.length;if(r||null!==f(an)||g(a,en),void 0!==je.anchors[r]&&(a.setAttribute("data-anchor",je.anchors[r]),p(a,en)&&de(je.anchors[r],r)),v>0){var d=100*v,m=100/v,S=a.innerHTML,y='<div class="'+hn+'"><div class="'+mn+'">'+S+"</div></div>";a.innerHTML=y,l=u(dn,a),s(f(Sn,a),"width",d+"%"),je.controlArrows&&v>1&&W(a),je.slidesNavigation&&Te(a,v);for(var b=0;b<l.length;b++)s(l[b],"width",m+"%");var T=f(pn,a);null!==typeof T?g(l[0],en):Re(T)}}e()}function i(){for(var t=u(Ln),o=0;o<t.length;o++)w(t[o],"click onclick touchstart",ie);P(je.autoScrolling,"internal");var i=f(an),r=f(pn,i),a=v(f(an));r&&(0!==a||0===a&&0!==v(r))&&Re(r),je.navigation&&(s(Fe,"margin-top","-"+Fe.offsetHeight/2+"px"),g(f("a",u("li",Fe)[v(f(an))]),en)),F();var l=e.location.hash.replace("#","").split("/")[0];if(l.length){var c=f('[data-anchor="'+l+'"]');if(!je.animateAnchor&&c.length){if(je.autoScrolling)Ie(c.offsetTop);else{Ie(0),xe(l);var d=ne(c.offsetTop);E(d.element,d.options,0)}de(l,null),L(je.afterLoad)&&je.afterLoad.call(c,l,v(c)+1),h(i,en),g(c,en)}}xe(),Ce(n,oe,"DOMContentLoaded","DOMContentLoaded","DOMContentLoaded")}function r(e,n){"object"!==(void 0===n?"undefined":_typeof(n))&&(n={});for(var t in n)e.hasOwnProperty(t)&&(e[t]=n[t]);return e}function a(e){return n.getElementById(e)}function l(e){return n.getElementsByTagName(e)[0]}function c(e,n){var t;for(t in n)n.hasOwnProperty(t)&&null!==t&&(e.style[t]=n[t]);return e}function s(e,n,t){e.style[n]=t}function f(e,t){return(t=t||n).querySelector(e)}function u(e,t){return(t=t||n).querySelectorAll(e)}function v(e){for(var n=0;e=e.previousSibling;)3==e.nodeType&&/^\s*$/.test(e.data)||n++;return n}function d(e,n){return void 0!==n?e.style.display=n?"block":"none":"block"==e.style.display?e.style.display="none":e.style.display="block",e}function p(e,n){return!!e.className.match(new RegExp("(\\s|^)"+n+"(\\s|$)"))}function h(e,n){if(e&&p(e,n)){var t=new RegExp("(\\s|^)"+n+"(\\s|$)");e.className=e.className.replace(t,"")}}function g(e,n){e&&!p(e,n)&&(e.className+=" "+n)}function m(e,n){return e&&(n(e)?e:m(e.parentNode,n))}function S(){return"innerWidth"in e?e.innerWidth:n.documentElement.offsetWidth}function y(){return"innerHeight"in e?e.innerHeight:n.documentElement.offsetHeight}function b(e){if(null===e||"object"!==(void 0===e?"undefined":_typeof(e)))return e;var n=e.constructor();for(var t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}function T(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function L(e){var n={};return e&&"[object Function]"===n.toString.call(e)}function w(e,t,o){for(var i=t.split(" "),r=0,a=i.length;r<a;r++)n.addEventListener?e.addEventListener(i[r],o,!1):e.attachEvent(i[r],o,!1)}function E(e,n,t,o){var i=B(e),r=n-i,a=0;Ue=!0;!function l(){if(Ue){var c=n;a+=20,c=Math.easeInOutCubic(a,i,r,t),C(e,c),a<t?setTimeout(l,20):void 0!==o&&o()}else a<t&&o()}()}function x(){var t=n.documentElement;return(e.pageYOffset||t.scrollTop)-(t.clientTop||0)}function M(e,n){for(var t=[];e;e=e.nextSibling)1==e.nodeType&&e!=n&&t.push(e);return t}function k(e){return M(e.parentNode.firstChild,e)}function A(e){for(var n=e.nextSibling;n&&1!=n.nodeType;)n=n.nextSibling;return n}function N(e){for(var n=e.previousSibling;n&&1!=n.nodeType;)n=n.previousSibling;return n}function B(n){return n.self!=e&&p(n,hn)?n.scrollLeft:!je.autoScrolling||je.scrollBar?x():n.offsetTop}function C(n,t){!je.autoScrolling||je.scrollBar||n.self!=e&&p(n,hn)?n.self!=e&&p(n,hn)?n.scrollLeft=t:n.scrollTo(0,t):n.style.top=t+"px"}function P(e,t){Oe("autoScrolling",e,t);var o=f(an);if(je.autoScrolling&&!je.scrollBar)c(n.body,{overflow:"hidden",height:"100%"}),c(l("html"),{overflow:"hidden",height:"100%"}),H(je.recordHistory,"internal"),c(qe,{"-ms-touch-action":"none","touch-action":"none"}),o&&Ie(o.offsetTop);else{c(n.body,{overflow:"visible",height:"100%"}),c(l("html"),{overflow:"visible",height:"100%"}),H(!1,"internal"),c(qe,{"-ms-touch-action":"","touch-action":""}),Ie(0);var i=ne(o.offsetTop);i.element.scrollTo(0,i.options)}}function H(e,n){Oe("recordHistory",e,n)}function z(e,n){Oe("scrollingSpeed",e,n)}function R(e){e?Ae():ke()}function I(){var e=N(f(an));e&&Z(e,null,!0)}function D(){var e=A(f(an));e&&Z(e,null,!1)}function O(e,n){var t=me(e);void 0!==n?ye(e,n):t&&Z(t)}function Y(){Q("next")}function X(){Q("prev")}function j(e){if(!p(qe,Je)){Pn=!0,Cn=y();for(var n=u(rn),t=0;t<n.length;++t){var o=n[t],i=f(gn,o),r=u(dn,o);i&&r.length>1&&le(i,f(pn,i))}var a=f(an);v(a)&&Ie(a.offsetTop),Pn=!1,L(je.afterResize)&&e&&je.afterResize.call(qe),L(je.afterReBuild)&&!e&&je.afterReBuild.call(qe)}}function W(e){var t=n.createElement("div");t.className=En;var o=n.createElement("div");o.className=Mn;var i=f(gn,e);je.controlArrowColor,i.parentNode.appendChild(t),i.parentNode.appendChild(o),je.loopHorizontal||(f(xn,e).style.display="none")}function _(){var o=n.createElement("div");o.setAttribute("id",ln);var i=n.createElement("ul");o.appendChild(i),n.body.appendChild(o),s(Fe=f(cn),"color",je.navigationColor),g(Fe,je.navigationPosition),je.showActiveTooltip&&g(Fe,fn);for(var r="",a=0;a<u(rn).length;a++){var l="";je.anchors.length&&(l=je.anchors[a]),r=r+'<li><a href="#'+l+'"><span></span></a>';var c=je.navigationTooltips[a];(void 0===c?"undefined":_typeof(c))!==t&&""!==c&&(r+='<div class="'+sn+" "+je.navigationPosition+'">'+c+"</div>"),r+="</li>"}var d=f("ul",Fe);d.innerHTML=d.innerHTML+r;for(var p=u(Tn),h=0;h<p.length;h++)w(p[h],"click onclick touchstart",function(n){T(n=e.event||n||n.originalEvent);var t=v(this.parentNode);Z(u(rn)[t],null,!1)})}function F(){var e=f(an);L(je.afterLoad)&&je.afterLoad.call(e,e.getAttribute("data-anchor"),v(e)+1),L(je.afterRender)&&je.afterRender.call(qe)}function U(){var e;if(!je.autoScrolling||je.scrollBar){for(var n=x(),t=0,o=Math.abs(n-u(rn)[0].offsetTop),i=u(rn),r=0;r<i.length;++r){var a=i[r],l=Math.abs(n-a.offsetTop);l<o&&(t=r,o=l)}e=u(rn)[t]}if(!je.autoScrolling||je.scrollBar){if(!p(e,en)){Dn=!0;var c=f(an),s=v(c)+1,d=pe(e),m=e.getAttribute("data-anchor"),S=v(e)+1,y=f(pn,e);if(y)var b=y.getAttribute("data-anchor"),T=v(y);Hn&&(h(c,en),g(e,en),L(je.onLeave)&&je.onLeave.call(c,s,S,d),L(je.afterLoad)&&je.afterLoad.call(e,m,S),de(m,0),je.anchors.length&&(We=m,Le(T,b,m,S))),clearTimeout(Rn),Rn=setTimeout(function(){Dn=!1},100)}je.fitToSection&&(clearTimeout(In),In=setTimeout(function(){(Hn&&!je.autoScrolling||je.scrollBar)&&(v(f(an))==v(e)&&(Pn=!0),Z(e),Pn=!1)},je.fitToSectionDelay))}}function $(e){"down"==e?D():I()}function q(n){var t=e.event||n||n.originalEvent;if(K(t)){je.autoScrolling&&T(n);var o=f(an),i=u(gn,o);if(Hn&&!An){var r=ze(t);Xn=r.y,jn=r.x,i&&Math.abs(Yn-jn)>Math.abs(On-Xn)?Math.abs(Yn-jn)>S()/100*je.touchSensitivity&&(Yn>jn?Y():X()):je.autoScrolling&&Math.abs(On-Xn)>y()/100*je.touchSensitivity&&(On>Xn?$("down"):Xn>On&&$("up"))}}}function K(e){return void 0===e.pointerType||"mouse"!=e.pointerType}function V(n){var t=e.event||n||n.originalEvent;if(je.fitToSection&&(Ue=!1),K(t)){var o=ze(t);On=o.y,Yn=o.x}}function G(e,n){for(var t=0,o=e.slice(Math.max(e.length-n,1)),i=0;i<o.length;i++)t+=o[i];return Math.ceil(t/n)}function J(n){var t=(new Date).getTime();if(je.autoScrolling){var o=(n=e.event||n||n.originalEvent).wheelDelta||-n.deltaY||-n.detail,i=Math.max(-1,Math.min(1,o));zn.length>149&&zn.shift(),zn.push(Math.abs(o)),je.scrollBar&&T(n);var r=t-Wn;return Wn=t,r>200&&(zn=[]),Hn&&G(zn,10)>=G(zn,70)&&$(i<0?"down":"up"),!1}je.fitToSection&&(Ue=!1)}function Q(e){var n=f(an),t=f(gn,n);if(t&&!An){var o=f(pn,t),i=null;if(!(i="prev"===e?N(o):A(o))){if(!je.loopHorizontal)return;var r=k(o);i="prev"===e?r[r.length-1]:r[0]}An=!0,le(t,i)}}function Z(e,n,t){if(null!==e){var o={element:e,callback:n,isMovementUp:t,dtop:e.offsetTop,yMovement:pe(e),anchorLink:e.getAttribute("data-anchor"),sectionIndex:v(e),activeSlide:f(pn,e),activeSection:f(an),leavingSection:v(f(an))+1,localIsResizing:Pn};if(!(v(o.activeSection)==o.sectionIndex&&!Pn||je.scrollBar&&x()===o.dtop)){if(o.activeSlide)var i=o.activeSlide.getAttribute("data-anchor"),r=v(o.activeSlide);for(var a=u(rn),l=0;l<a.length;l++)h(a[l],en);g(e,en),Hn=!1,Le(r,i,o.anchorLink,o.sectionIndex),L(je.onLeave)&&!o.localIsResizing&&je.onLeave.call(o.activeSection,o.leavingSection,o.sectionIndex+1,o.yMovement),ee(o),We=o.anchorLink,de(o.anchorLink,o.sectionIndex)}}}function ee(e){if(je.css3&&je.autoScrolling&&!je.scrollBar)ge("translate3d(0px, -"+e.dtop+"px, 0px)",!0),je.scrollingSpeed?setTimeout(function(){te(e)},je.scrollingSpeed):te(e);else{var n=ne(e.dtop);E(n.element,n.options,je.scrollingSpeed,function(){te(e)})}}function ne(n){var t={};return je.autoScrolling&&!je.scrollBar?(t.options=-n,t.element=f("."+Ke)):(t.options=n,t.element=e),t}function te(e){L(je.afterLoad)&&!e.localIsResizing&&je.afterLoad.call(e.element,e.anchorLink,e.sectionIndex+1),Hn=!0,L(e.callback)&&e.callback.call(this)}function oe(){var n=e.location.hash.replace("#","").split("/"),t=n[0],o=n[1];t&&ye(t,o)}function ie(n){var t=this;t.self==e&&(t=n.target||n.srcElement),p(t,wn)?X():Y()}function re(){if(!Dn){var n=e.location.hash.replace("#","").split("/"),t=n[0],o=n[1];if(t.length){var i=void 0===We,r=void 0===We&&void 0===o&&!An;(t&&t!==We&&!i||r||!An&&_e!=o)&&ye(t,o)}}}function ae(e,n){switch(n){case 38:case 33:I();break;case 32:if(e){I();break}case 40:case 34:D();break;case 36:O(1);break;case 35:O(u(rn).length);break;case 37:X();break;case 39:Y();break;default:return}}function le(e,n){var t=v(n),o=m(e,function(e){return p(e,on)}),i=v(o),r=o.getAttribute("data-anchor"),a=f(bn,o),l=Ee(n),c=Pn;if(je.onSlideLeave){var s=f(pn,o),S=v(s),y=he(S,t);c||"none"===y||L(je.onSlideLeave)&&je.onSlideLeave.call(s,r,i+1,S,y,t)}for(var b=u(dn,o),T=0;T<b.length;T++)h(b[T],en);g(n,en),!je.loopHorizontal&&je.controlArrows&&(d(f(xn,o),0!==t),d(f(kn,o),!n.is(":last-child"))),p(o,en)&&Le(t,l,r,i);var w=function(){c||L(je.afterSlideLoad)&&je.afterSlideLoad.call(n,r,i+1,l,t),An=!1};if(je.css3){var x="translate3d(-"+Math.round(n.offsetLeft)+"px, 0px, 0px)",M=f(Sn,e);se(M,je.scrollingSpeed>0),De(M,x),setTimeout(function(){w()},je.scrollingSpeed,je.easing)}else E(e,Math.round(n.offsetLeft),je.scrollingSpeed,function(){w()});je.slidesNavigation&&(h(f(nn,a),en),g(f("a",u("li",a)[t]),en))}function ce(){if(Nn){if("text"!==n.activeElement.getAttribute("type")){var e=y();Math.abs(e-Un)>20*Math.max(Un,e)/100&&(j(!0),Un=e)}}else clearTimeout(Fn),Fn=setTimeout(function(){j(!0)},350)}function se(e){var n="all "+je.scrollingSpeed+"ms "+je.easingcss3;return h(e,Ge),c(e,{"-webkit-transition":n,transition:n}),e}function fe(e){return g(e,Ge)}function ue(e,n){je.navigation&&(h(f(nn,Fe),en),e?g(f('a[href="#'+e+'"]',Fe),en):g(f("a",u("li",Fe)[n]),en))}function ve(e){if(je.menu){var n=f(je.menu);n&&(h(f(nn,n),en),g(f('[data-menuanchor="'+e+'"]',n),en))}}function de(e,n){ve(e),ue(e,n)}function pe(e){var n=v(f(an)),t=v(e);return n==t?"none":n>t?"up":"down"}function he(e,n){return e==n?"none":e>n?"left":"right"}function ge(e,n){n?se(qe):fe(qe),De(qe,e),setTimeout(function(){h(qe,Ge)},10)}function me(e){var n=f(rn+'[data-anchor="'+e+'"]');return n||(n=u(rn)[e-1]),n}function Se(e,n){var t=f(gn,n),o=f(dn+'[data-anchor="'+e+'"]',t);return t&&!o&&(o=u(dn,t)[e]),o}function ye(e,n){var t=me(decodeURI(e));void 0===n&&(n=0),e===We||p(t,en)?be(t,n):Z(t,function(){be(t,n)})}function be(e,n){if(void 0!==n){var t=f(gn,e),o=Se(n,e);o&&le(t,o)}}function Te(e,t){var o=n.createElement("div");o.className=yn;var i=n.createElement("ul");o.appendChild(i),e.appendChild(o);var r=f(bn,e),a=f("ul",r);g(r,je.slidesNavPosition);for(var l="",c=0;c<t;c++)l+='<li><a href="#"><span></span></a></li>';a.innerHTML=a.innerHTML+l,s(r,"margin-left","-"+r.offsetWidth/2+"px"),g(f("a",u("li",r)[0]),en)}function Le(e,n,t,o){var i="";je.anchors.length&&(e?(void 0!==t&&(i=t),void 0===n&&(n=e),_e=n,we(i+"/"+n)):void 0!==e?(_e=n,we(t)):we(t)),xe()}function we(n){if(je.recordHistory)location.hash=n;else if(Nn||Bn)history.replaceState(t,t,"#"+n);else{var o=e.location.href.split("#")[0];e.location.replace(o+"#"+n)}}function Ee(e){var n=e.getAttribute("data-anchor"),t=v(e);return n||(n=t),n}function xe(e){var t=f(an),o=f(pn,t),i=t.getAttribute("data-anchor"),r=v(t),e=String(r);je.anchors.length&&(e=i),o&&(e=e+"-"+Ee(o)),e=e.replace("/","-").replace("#","");var a=new RegExp("\\b\\s?"+Ze+"-[^\\s]+\\b","g");n.body.className=n.body.className.replace(a,""),g(n.body,Ze+"-"+e)}function Me(){var o,i=n.createElement("p"),r={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};n.body.insertBefore(i,null);for(var a in r)i.style[a]!==t&&(i.style[a]="translate3d(1px,1px,1px)",o=e.getComputedStyle(i).getPropertyValue(r[a]));return n.body.removeChild(i),o!==t&&o.length>0&&"none"!==o}function ke(){var e=f(Ve);n.addEventListener?(e.removeEventListener("mousewheel",J,!1),e.removeEventListener("wheel",J,!1)):e.detachEvent("onmousewheel",J)}function Ae(){Ce(f(Ve),J,"mousewheel","onmousewheel","wheel")}function Ne(){Ce(e,ce,"resize","onresize")}function Be(){Ce(e,U,"scroll","onscroll","onscroll")}function Ce(e,n,t,o,i){e.addEventListener?(e.addEventListener(t,n,!1),void 0!==i&&e.addEventListener(i,n,!1)):e.attachEvent(o,n)}function Pe(){if(Nn||Bn){var e=f(Ve);if(n.addEventListener){var t=He();e.removeEventListener("touchstart",V),e.removeEventListener(t.down,V),e.removeEventListener("touchmove",q),e.removeEventListener(t.move,q),w(e,"touchstart "+t.down,V),w(e,"touchmove "+t.move,q)}}}function He(){return e.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"}}function ze(e){var n=[];return n.y=void 0!==e.pageY&&(e.pageY||e.pageX)?e.pageY:e.touches[0].pageY,n.x=void 0!==e.pageX&&(e.pageY||e.pageX)?e.pageX:e.touches[0].pageX,Bn&&K(e)&&(n.y=e.touches[0].pageY,n.x=e.touches[0].pageX),n}function Re(e,n){z(0,"internal"),void 0!==n&&(Pn=!0),le(m(e,function(e){return p(e,hn)}),e),void 0!==n&&(Pn=!1),z($e.scrollingSpeed,"internal")}function Ie(e){if(je.scrollBar){var n=ne(e);C(n.element,n.options,0)}else je.css3?ge("translate3d(0px, -"+e+"px, 0px)",!1):s(qe,"top",-e+"px")}function De(e,n){c(e,{"-webkit-transform":n,"-moz-transform":n,"-ms-transform":n,transform:n})}function Oe(e,n,t){je[e]=n,"internal"!==t&&($e[e]=n)}function Ye(){for(var e=0;e<je.anchors.length;e++){var n=je.anchors[e];(a("#"+n)||u('[name="'+n+'"]').length)&&Xe("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).")}}function Xe(e,n){console&&console[e]&&console[e]("fullPage: "+n)}var je,We,_e,Fe,Ue,$e,qe,Ke="fullpage-wrapper",Ve="."+Ke,Ge="fp-notransition",Je="fp-destroyed",Qe="fp-enabled",Ze="fp-viewing",en="active",nn="."+en,tn=".section",on="fp-section",rn="."+on,an=rn+nn,ln="fp-nav",cn="#"+ln,sn="fp-tooltip",fn="fp-show-active",un=".slide",vn="fp-slide",dn="."+vn,pn=dn+nn,hn="fp-slides",gn="."+hn,mn="fp-slidesContainer",Sn="."+mn,yn="fp-slidesNav",bn="."+yn,Tn=bn+" a",Ln=".fp-controlArrow",wn="fp-prev",En="fp-controlArrow "+wn,xn=Ln+("."+wn),Mn="fp-controlArrow fp-next",kn=Ln+".fp-next",An=!1,Nn=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),Bn="ontouchstart"in e||navigator.msMaxTouchPoints>0||navigator.maxTouchPoints,Cn=y(),Pn=!1,Hn=!0,zn=[];Math.easeInOutCubic=function(e,n,t,o){return(e/=o/2)<1?t/2*e*e*e+n:t/2*((e-=2)*e*e+2)+n};var Rn,In,Dn=!1,On=0,Yn=0,Xn=0,jn=0,Wn=(new Date).getTime();n.addEventListener?e.addEventListener("hashchange",re,!1):e.attachEvent("onhashchange",re);var _n;n.onkeydown=function(t){clearTimeout(_n);var o=n.activeElement.tagName;if("SELECT"!==o&&"INPUT"!==o&&je.keyboardScrolling&&je.autoScrolling){for(var i=(t=e.event||t||t.originalEvent).charCode||t.keyCode,r=[40,38,32,33,34],a=0;a<r.length;a++)r[a]==i&&T(t);var l=t.shiftKey;_n=setTimeout(function(){ae(l,i)},150)}},null!==f(Tn)&&w(f(Tn),"click onclick touchstart",function(e){T(e);var n=m(this,function(e){return p(e1,on)}),t=f(gn,n),o=v(m(this,function(e){return"li"===e.tagName}));le(t,u(dn,t)[o])});var Fn,Un=Cn;return{initialize:function(e,n){je=r({menu:!1,anchors:[],navigation:!1,navigationPosition:"right",navigationColor:"#000",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easingcss3:"ease",loopHorizontal:!0,touchSensitivity:5,keyboardScrolling:!0,recordHistory:!0,controlArrows:!0,sectionSelector:tn,slideSelector:un,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null},n),$e=b(je),qe=f(e),o(i)},moveSectionUp:I,moveSectionDown:D,moveTo:O,silentMoveTo:function(e,n){z(0,"internal"),O(e,n),z($e.scrollingSpeed,"internal")},moveSlideRight:Y,moveSlideLeft:X,setAutoScrolling:P,setFitToSection:function(e,n){Oe("fitToSection",e,n)},setKeyboardScrolling:function(e){je.keyboardScrolling=e},setRecordHistory:H,setScrollingSpeed:z}});
"use strict";fullpage.initialize("#fullpage",{css3:!0,scrollingSpeed:1e3});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
